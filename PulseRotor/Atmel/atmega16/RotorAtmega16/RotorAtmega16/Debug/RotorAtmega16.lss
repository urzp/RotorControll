
RotorAtmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000dc  008000dc  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a1  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c7  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036c  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3d       	cpi	r26, 0xDC	; 220
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ed       	ldi	r26, 0xDC	; 220
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3e       	cpi	r26, 0xE4	; 228
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  8a:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9set_A_PWMv>:
int SinTable[60]={0,27,53,79,104,127,150,171,189,206,221,233,242,249,254,255,254,249,243,233,221,206,190,171,150,128,104,79,53,27,0,-26,-53,-78,-103,-127,-149,-170,-189,-206,-221,-233,-242,-249,-254,-255,-254,-250,-243,-233,-221,-207,-190,-171,-150,-128,-104,-80,-54,-27};

volatile int A_volume, B_volume, C_volume;

void set_A_PWM(){
	if (A_volume >= 0){
  92:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <A_volume>
  96:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <A_volume+0x1>
  9a:	99 23       	and	r25, r25
  9c:	3c f0       	brlt	.+14     	; 0xac <_Z9set_A_PWMv+0x1a>
		PORTD |= (1<<A_Derect);
  9e:	92 9a       	sbi	0x12, 2	; 18
		A_PWM = A_volume;
  a0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <A_volume>
  a4:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <A_volume+0x1>
  a8:	9b bd       	out	0x2b, r25	; 43
  aa:	8a bd       	out	0x2a, r24	; 42
	}
	if (A_volume<0){
  ac:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <A_volume>
  b0:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <A_volume+0x1>
  b4:	99 23       	and	r25, r25
  b6:	4c f4       	brge	.+18     	; 0xca <_Z9set_A_PWMv+0x38>
		PORTD &= ~(1<<A_Derect);
  b8:	92 98       	cbi	0x12, 2	; 18
		A_PWM = 255 + A_volume;
  ba:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <A_volume>
  be:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <A_volume+0x1>
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	9f 4f       	sbci	r25, 0xFF	; 255
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
  ca:	08 95       	ret

000000cc <_Z9set_B_PWMv>:
	}
}

void set_B_PWM(){
	if (B_volume >= 0){
  cc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <B_volume>
  d0:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <B_volume+0x1>
  d4:	99 23       	and	r25, r25
  d6:	3c f0       	brlt	.+14     	; 0xe6 <_Z9set_B_PWMv+0x1a>
		PORTD |= (1<<B_Derect);
  d8:	93 9a       	sbi	0x12, 3	; 18
		B_PWM = B_volume;
  da:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <B_volume>
  de:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <B_volume+0x1>
  e2:	99 bd       	out	0x29, r25	; 41
  e4:	88 bd       	out	0x28, r24	; 40
	}
	if (B_volume<0){
  e6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <B_volume>
  ea:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <B_volume+0x1>
  ee:	99 23       	and	r25, r25
  f0:	4c f4       	brge	.+18     	; 0x104 <_Z9set_B_PWMv+0x38>
		PORTD &= ~(1<<B_Derect);
  f2:	93 98       	cbi	0x12, 3	; 18
		B_PWM = 255 + B_volume;
  f4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <B_volume>
  f8:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <B_volume+0x1>
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	99 bd       	out	0x29, r25	; 41
 102:	88 bd       	out	0x28, r24	; 40
 104:	08 95       	ret

00000106 <_Z9set_C_PWMv>:
	}
}

void set_C_PWM(){
	if (C_volume >= 0){
 106:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
 10a:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
 10e:	99 23       	and	r25, r25
 110:	34 f0       	brlt	.+12     	; 0x11e <_Z9set_C_PWMv+0x18>
		PORTD |= (1<<C_Derect);
 112:	96 9a       	sbi	0x12, 6	; 18
		C_PWM = C_volume;
 114:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
 118:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
 11c:	83 bd       	out	0x23, r24	; 35
	}
	if (C_volume<0){
 11e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
 122:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
 126:	99 23       	and	r25, r25
 128:	3c f4       	brge	.+14     	; 0x138 <_Z9set_C_PWMv+0x32>
		PORTD &= ~(1<<C_Derect);
 12a:	96 98       	cbi	0x12, 6	; 18
		C_PWM = 255 + C_volume;
 12c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
 130:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	83 bd       	out	0x23, r24	; 35
 138:	08 95       	ret

0000013a <_Z8pin_initv>:
	}
}

void pin_init(void) {
	DDRD |= (1<<A_PD) | (1<<B_PD) | (1<<C_PD) | (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect) | (1<<PD1);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	8e 6f       	ori	r24, 0xFE	; 254
 13e:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<A_PD) | (1<<B_PD) | (1<<C_PD));
 140:	82 b3       	in	r24, 0x12	; 18
 142:	8f 74       	andi	r24, 0x4F	; 79
 144:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect)  | (1<<PD1) ;
 146:	82 b3       	in	r24, 0x12	; 18
 148:	8e 64       	ori	r24, 0x4E	; 78
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	08 95       	ret

0000014e <_Z11timer0_initv>:
	
}

void timer0_init(){
	TCCR0 |= (1<<WGM01); // устанавливаем режим СТС (сброс по совпадению)
 14e:	83 b7       	in	r24, 0x33	; 51
 150:	88 60       	ori	r24, 0x08	; 8
 152:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);	//устанавливаем бит разрешения прерывания 0ого счетчика по совпадению с OCR1A(H и L)
 154:	89 b7       	in	r24, 0x39	; 57
 156:	82 60       	ori	r24, 0x02	; 2
 158:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<CS02) | (1<<CS00);//установим делитель.
 15a:	83 b7       	in	r24, 0x33	; 51
 15c:	85 60       	ori	r24, 0x05	; 5
 15e:	83 bf       	out	0x33, r24	; 51
	sei();
 160:	78 94       	sei
	 //16.000.000/1024 = 15625 Гц   SinTable[31]
	OCR0 = 245/50;
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	8c bf       	out	0x3c, r24	; 60
 166:	08 95       	ret

00000168 <_Z11timer1_initv>:
}

void timer1_init(void) {
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 168:	8f b5       	in	r24, 0x2f	; 47
 16a:	82 6a       	ori	r24, 0xA2	; 162
 16c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 16e:	8e b5       	in	r24, 0x2e	; 46
 170:	8a 61       	ori	r24, 0x1A	; 26
 172:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;
 174:	1d bc       	out	0x2d, r1	; 45
 176:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 0xFF;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	97 bd       	out	0x27, r25	; 39
 17e:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0x00;
 180:	1b bc       	out	0x2b, r1	; 43
 182:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x00;
 184:	19 bc       	out	0x29, r1	; 41
 186:	18 bc       	out	0x28, r1	; 40
 188:	08 95       	ret

0000018a <_Z11timer2_initv>:
}

void timer2_init(void) {
	TCCR2 |= (1 << COM21) | (1 << WGM21) | (1 << WGM20) | (1 << CS21);
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	8a 66       	ori	r24, 0x6A	; 106
 18e:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
 190:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0x00;
 192:	13 bc       	out	0x23, r1	; 35
 194:	08 95       	ret

00000196 <_Z3tikv>:
}


void tik(){
	phasa_a++;
 196:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <phasa_a>
 19a:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <phasa_a+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <phasa_a+0x1>
 1a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <phasa_a>
	phasa_b++;
 1a8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <phasa_b>
 1ac:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <phasa_b+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <phasa_b+0x1>
 1b6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <phasa_b>
	phasa_c++;
 1ba:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <phasa_c>
 1be:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <phasa_c+0x1>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <phasa_c+0x1>
 1c8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <phasa_c>
		
	if (phasa_a>59){phasa_a=0;}
 1cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <phasa_a>
 1d0:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <phasa_a+0x1>
 1d4:	cc 97       	sbiw	r24, 0x3c	; 60
 1d6:	24 f0       	brlt	.+8      	; 0x1e0 <_Z3tikv+0x4a>
 1d8:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <phasa_a+0x1>
 1dc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <phasa_a>
	if (phasa_b>59){phasa_b=0;}
 1e0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <phasa_b>
 1e4:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <phasa_b+0x1>
 1e8:	cc 97       	sbiw	r24, 0x3c	; 60
 1ea:	24 f0       	brlt	.+8      	; 0x1f4 <_Z3tikv+0x5e>
 1ec:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <phasa_b+0x1>
 1f0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <phasa_b>
	if (phasa_c>59){phasa_c=0;}
 1f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <phasa_c>
 1f8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <phasa_c+0x1>
 1fc:	cc 97       	sbiw	r24, 0x3c	; 60
 1fe:	24 f0       	brlt	.+8      	; 0x208 <_Z3tikv+0x72>
 200:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <phasa_c+0x1>
 204:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <phasa_c>
		
	A_volume = SinTable[phasa_a];
 208:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <phasa_a>
 20c:	f0 91 e3 00 	lds	r31, 0x00E3	; 0x8000e3 <phasa_a+0x1>
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e0 5a       	subi	r30, 0xA0	; 160
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <A_volume+0x1>
 220:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <A_volume>
	B_volume = SinTable[phasa_b];
 224:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <phasa_b>
 228:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <phasa_b+0x1>
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e0 5a       	subi	r30, 0xA0	; 160
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 81       	ld	r24, Z
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <B_volume+0x1>
 23c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <B_volume>
	C_volume = SinTable[phasa_c];
 240:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <phasa_c>
 244:	f0 91 d9 00 	lds	r31, 0x00D9	; 0x8000d9 <phasa_c+0x1>
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	e0 5a       	subi	r30, 0xA0	; 160
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <__data_end+0x1>
 258:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__data_end>
		
	set_A_PWM();
 25c:	0e 94 49 00 	call	0x92	; 0x92 <_Z9set_A_PWMv>
	set_B_PWM();
 260:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9set_B_PWMv>
	set_C_PWM();	
 264:	0e 94 83 00 	call	0x106	; 0x106 <_Z9set_C_PWMv>
	
	if (phasa_a==0){PORTD |= (1<<PD1);}
 268:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <phasa_a>
 26c:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <phasa_a+0x1>
 270:	89 2b       	or	r24, r25
 272:	09 f4       	brne	.+2      	; 0x276 <_Z3tikv+0xe0>
 274:	91 9a       	sbi	0x12, 1	; 18
	if (phasa_a==29){PORTD  &= ~(1<<PD1);}
 276:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <phasa_a>
 27a:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <phasa_a+0x1>
 27e:	4d 97       	sbiw	r24, 0x1d	; 29
 280:	09 f4       	brne	.+2      	; 0x284 <_Z3tikv+0xee>
 282:	91 98       	cbi	0x12, 1	; 18
 284:	08 95       	ret

00000286 <__vector_19>:
}

ISR (TIMER0_COMP_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	tik();
 2a8:	0e 94 cb 00 	call	0x196	; 0x196 <_Z3tikv>
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <main>:


int main(void)
{
 
 	pin_init();
 2ce:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z8pin_initv>
	timer0_init();
 2d2:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z11timer0_initv>
 	timer1_init();
 2d6:	0e 94 b4 00 	call	0x168	; 0x168 <_Z11timer1_initv>
 	timer2_init();
 2da:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z11timer2_initv>
 2de:	ff cf       	rjmp	.-2      	; 0x2de <main+0x10>

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>

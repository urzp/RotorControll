
RotorAtmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000002c8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ac  008000ac  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a1  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c7  00000000  00000000  00000c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000349  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ea       	ldi	r26, 0xAC	; 172
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  8a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9set_A_PWMv>:
int SinTable[36]={0,44,87,128,164,195,221,240,251,255,251,240,221,195,164,128,87,44,0,-44,-87,-128,-164,-195,-221,-240,-251,-255,-251,-240,-221,-195,-164,-128,-87,-44};

volatile int A_volume, B_volume, C_volume;

void set_A_PWM(){
	if (A_volume >= 0){
  92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <A_volume>
  96:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <A_volume+0x1>
  9a:	99 23       	and	r25, r25
  9c:	3c f0       	brlt	.+14     	; 0xac <_Z9set_A_PWMv+0x1a>
		PORTD |= (1<<A_Derect);
  9e:	92 9a       	sbi	0x12, 2	; 18
		A_PWM = A_volume;
  a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <A_volume>
  a4:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <A_volume+0x1>
  a8:	9b bd       	out	0x2b, r25	; 43
  aa:	8a bd       	out	0x2a, r24	; 42
	}
	if (A_volume<0){
  ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <A_volume>
  b0:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <A_volume+0x1>
  b4:	99 23       	and	r25, r25
  b6:	4c f4       	brge	.+18     	; 0xca <_Z9set_A_PWMv+0x38>
		PORTD &= ~(1<<A_Derect);
  b8:	92 98       	cbi	0x12, 2	; 18
		A_PWM = 255 + A_volume;
  ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <A_volume>
  be:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <A_volume+0x1>
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	9f 4f       	sbci	r25, 0xFF	; 255
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
  ca:	08 95       	ret

000000cc <_Z9set_B_PWMv>:
	}
}

void set_B_PWM(){
	if (B_volume >= 0){
  cc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <B_volume>
  d0:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <B_volume+0x1>
  d4:	99 23       	and	r25, r25
  d6:	3c f0       	brlt	.+14     	; 0xe6 <_Z9set_B_PWMv+0x1a>
		PORTD |= (1<<B_Derect);
  d8:	93 9a       	sbi	0x12, 3	; 18
		B_PWM = B_volume;
  da:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <B_volume>
  de:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <B_volume+0x1>
  e2:	99 bd       	out	0x29, r25	; 41
  e4:	88 bd       	out	0x28, r24	; 40
	}
	if (B_volume<0){
  e6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <B_volume>
  ea:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <B_volume+0x1>
  ee:	99 23       	and	r25, r25
  f0:	4c f4       	brge	.+18     	; 0x104 <_Z9set_B_PWMv+0x38>
		PORTD &= ~(1<<B_Derect);
  f2:	93 98       	cbi	0x12, 3	; 18
		B_PWM = 255 + B_volume;
  f4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <B_volume>
  f8:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <B_volume+0x1>
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	99 bd       	out	0x29, r25	; 41
 102:	88 bd       	out	0x28, r24	; 40
 104:	08 95       	ret

00000106 <_Z9set_C_PWMv>:
	}
}

void set_C_PWM(){
	if (C_volume >= 0){
 106:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 10a:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <__data_end+0x1>
 10e:	99 23       	and	r25, r25
 110:	34 f0       	brlt	.+12     	; 0x11e <_Z9set_C_PWMv+0x18>
		PORTD |= (1<<C_Derect);
 112:	96 9a       	sbi	0x12, 6	; 18
		C_PWM = C_volume;
 114:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 118:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <__data_end+0x1>
 11c:	83 bd       	out	0x23, r24	; 35
	}
	if (C_volume<0){
 11e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 122:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <__data_end+0x1>
 126:	99 23       	and	r25, r25
 128:	3c f4       	brge	.+14     	; 0x138 <_Z9set_C_PWMv+0x32>
		PORTD &= ~(1<<C_Derect);
 12a:	96 98       	cbi	0x12, 6	; 18
		C_PWM = 255 + C_volume;
 12c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 130:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <__data_end+0x1>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	83 bd       	out	0x23, r24	; 35
 138:	08 95       	ret

0000013a <_Z8pin_initv>:
	}
}

void pin_init(void) {
	DDRD |= (1<<A_PD) | (1<<B_PD) | (1<<C_PD) | (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect) ;
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	8c 6f       	ori	r24, 0xFC	; 252
 13e:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<A_PD) | (1<<B_PD) | (1<<C_PD));
 140:	82 b3       	in	r24, 0x12	; 18
 142:	8f 74       	andi	r24, 0x4F	; 79
 144:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect) ;
 146:	82 b3       	in	r24, 0x12	; 18
 148:	8c 64       	ori	r24, 0x4C	; 76
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	08 95       	ret

0000014e <_Z11timer0_initv>:
}

void timer0_init(){
	TCCR0 |= (1<<WGM01); // устанавливаем режим СТС (сброс по совпадению)
 14e:	83 b7       	in	r24, 0x33	; 51
 150:	88 60       	ori	r24, 0x08	; 8
 152:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);	//устанавливаем бит разрешения прерывания 0ого счетчика по совпадению с OCR1A(H и L)
 154:	89 b7       	in	r24, 0x39	; 57
 156:	82 60       	ori	r24, 0x02	; 2
 158:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<CS02);//установим делитель.
 15a:	83 b7       	in	r24, 0x33	; 51
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	83 bf       	out	0x33, r24	; 51
	sei();
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <_Z11timer1_initv>:
}

void timer1_init(void) {
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 164:	8f b5       	in	r24, 0x2f	; 47
 166:	82 6a       	ori	r24, 0xA2	; 162
 168:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 16a:	8e b5       	in	r24, 0x2e	; 46
 16c:	8a 61       	ori	r24, 0x1A	; 26
 16e:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;
 170:	1d bc       	out	0x2d, r1	; 45
 172:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 0xFF;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	97 bd       	out	0x27, r25	; 39
 17a:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0x00;
 17c:	1b bc       	out	0x2b, r1	; 43
 17e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x00;
 180:	19 bc       	out	0x29, r1	; 41
 182:	18 bc       	out	0x28, r1	; 40
 184:	08 95       	ret

00000186 <_Z11timer2_initv>:
}

void timer2_init(void) {
	TCCR2 |= (1 << COM21) | (1 << WGM21) | (1 << WGM20) | (1 << CS21);
 186:	85 b5       	in	r24, 0x25	; 37
 188:	8a 66       	ori	r24, 0x6A	; 106
 18a:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
 18c:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0x00;
 18e:	13 bc       	out	0x23, r1	; 35
 190:	08 95       	ret

00000192 <_Z3tikv>:
}


void tik(){
	phasa_a++;
 192:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <phasa_a>
 196:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <phasa_a+0x1>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <phasa_a+0x1>
 1a0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <phasa_a>
	phasa_b++;
 1a4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <phasa_b>
 1a8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <phasa_b+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <phasa_b+0x1>
 1b2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <phasa_b>
	phasa_c++;
 1b6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <phasa_c>
 1ba:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <phasa_c+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <phasa_c+0x1>
 1c4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <phasa_c>
		
	if (phasa_a>35){phasa_a=0;}
 1c8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <phasa_a>
 1cc:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <phasa_a+0x1>
 1d0:	84 97       	sbiw	r24, 0x24	; 36
 1d2:	24 f0       	brlt	.+8      	; 0x1dc <_Z3tikv+0x4a>
 1d4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <phasa_a+0x1>
 1d8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <phasa_a>
	if (phasa_b>35){phasa_b=0;}
 1dc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <phasa_b>
 1e0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <phasa_b+0x1>
 1e4:	84 97       	sbiw	r24, 0x24	; 36
 1e6:	24 f0       	brlt	.+8      	; 0x1f0 <_Z3tikv+0x5e>
 1e8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <phasa_b+0x1>
 1ec:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <phasa_b>
	if (phasa_c>35){phasa_c=0;}
 1f0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <phasa_c>
 1f4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <phasa_c+0x1>
 1f8:	84 97       	sbiw	r24, 0x24	; 36
 1fa:	24 f0       	brlt	.+8      	; 0x204 <_Z3tikv+0x72>
 1fc:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <phasa_c+0x1>
 200:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <phasa_c>
		
	A_volume = SinTable[phasa_a];
 204:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <phasa_a>
 208:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <phasa_a+0x1>
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	80 81       	ld	r24, Z
 216:	91 81       	ldd	r25, Z+1	; 0x01
 218:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <A_volume+0x1>
 21c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <A_volume>
	B_volume = SinTable[phasa_b];
 220:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <phasa_b>
 224:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <phasa_b+0x1>
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e0 5a       	subi	r30, 0xA0	; 160
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
 234:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <B_volume+0x1>
 238:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <B_volume>
	C_volume = SinTable[phasa_c];
 23c:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <phasa_c>
 240:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <phasa_c+0x1>
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e0 5a       	subi	r30, 0xA0	; 160
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__data_end+0x1>
 254:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end>
		
	set_A_PWM();
 258:	0e 94 49 00 	call	0x92	; 0x92 <_Z9set_A_PWMv>
	set_B_PWM();
 25c:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9set_B_PWMv>
	set_C_PWM();	
 260:	0e 94 83 00 	call	0x106	; 0x106 <_Z9set_C_PWMv>
 264:	08 95       	ret

00000266 <__vector_19>:
}

ISR (TIMER0_COMP_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	tik();
 288:	0e 94 c9 00 	call	0x192	; 0x192 <_Z3tikv>
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <main>:


int main(void)
{
 
 	pin_init();
 2ae:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z8pin_initv>
	timer0_init();
 2b2:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z11timer0_initv>
 	timer1_init();
 2b6:	0e 94 b2 00 	call	0x164	; 0x164 <_Z11timer1_initv>
 	timer2_init();
 2ba:	0e 94 c3 00 	call	0x186	; 0x186 <_Z11timer2_initv>
	
		
	OCR0 = 255;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	8c bf       	out	0x3c, r24	; 60
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x14>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>

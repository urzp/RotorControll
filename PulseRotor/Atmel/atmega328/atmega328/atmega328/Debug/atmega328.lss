
atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800140  00800140  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000847  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066c  00000000  00000000  00000cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  9e:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9set_A_PWMv>:

volatile int A_volume, B_volume, C_volume;


void set_A_PWM(){
	if (A_volume >= 0){
  a6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <A_volume>
  aa:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <A_volume+0x1>
  ae:	99 23       	and	r25, r25
  b0:	34 f0       	brlt	.+12     	; 0xbe <_Z9set_A_PWMv+0x18>
		A_DerectPort |= (1<<A_Derect);
  b2:	28 9a       	sbi	0x05, 0	; 5
		A_PWM = A_volume;
  b4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <A_volume>
  b8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <A_volume+0x1>
  bc:	87 bd       	out	0x27, r24	; 39
	}
	if (A_volume<0){
  be:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <A_volume>
  c2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <A_volume+0x1>
  c6:	99 23       	and	r25, r25
  c8:	3c f4       	brge	.+14     	; 0xd8 <_Z9set_A_PWMv+0x32>
		PORTB &= ~(1<<A_Derect);
  ca:	28 98       	cbi	0x05, 0	; 5
		A_PWM = -1 * A_volume;
  cc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <A_volume>
  d0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <A_volume+0x1>
  d4:	81 95       	neg	r24
  d6:	87 bd       	out	0x27, r24	; 39
  d8:	08 95       	ret

000000da <_Z9set_B_PWMv>:
	}
}

void set_B_PWM(){
	if (B_volume >= 0){
  da:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <B_volume>
  de:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <B_volume+0x1>
  e2:	99 23       	and	r25, r25
  e4:	34 f0       	brlt	.+12     	; 0xf2 <_Z9set_B_PWMv+0x18>
		B_DerectPort |= (1<<B_Derect);
  e6:	29 9a       	sbi	0x05, 1	; 5
		B_PWM = B_volume;
  e8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <B_volume>
  ec:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <B_volume+0x1>
  f0:	88 bd       	out	0x28, r24	; 40
	}
	if (B_volume<0){
  f2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <B_volume>
  f6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <B_volume+0x1>
  fa:	99 23       	and	r25, r25
  fc:	3c f4       	brge	.+14     	; 0x10c <_Z9set_B_PWMv+0x32>
		B_DerectPort &= ~(1<<B_Derect);
  fe:	29 98       	cbi	0x05, 1	; 5
		B_PWM = -1 * B_volume;
 100:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <B_volume>
 104:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <B_volume+0x1>
 108:	81 95       	neg	r24
 10a:	88 bd       	out	0x28, r24	; 40
 10c:	08 95       	ret

0000010e <_Z9set_C_PWMv>:
	}
}

void set_C_PWM(){
	if (C_volume >= 0){
 10e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 112:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 116:	99 23       	and	r25, r25
 118:	3c f0       	brlt	.+14     	; 0x128 <_Z9set_C_PWMv+0x1a>
		C_DerectPort |= (1<<C_Derect);
 11a:	2a 9a       	sbi	0x05, 2	; 5
		C_PWM = C_volume;
 11c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 120:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 124:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (C_volume<0){
 128:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 12c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 130:	99 23       	and	r25, r25
 132:	44 f4       	brge	.+16     	; 0x144 <_Z9set_C_PWMv+0x36>
		C_DerectPort &= ~(1<<C_Derect);
 134:	2a 98       	cbi	0x05, 2	; 5
		C_PWM = -1 * C_volume;
 136:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 13a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 13e:	81 95       	neg	r24
 140:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 144:	08 95       	ret

00000146 <_Z8pin_initv>:



void pin_init(void) {

	DDRB |= (1<<A_PD) | (1<<B_PD) | (1<<C_PD) | (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect);
 146:	84 b1       	in	r24, 0x04	; 4
 148:	8f 66       	ori	r24, 0x6F	; 111
 14a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<A_PD) | (1<<B_PD) | (1<<0);
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	81 66       	ori	r24, 0x61	; 97
 150:	8a b9       	out	0x0a, r24	; 10

	PORTB |= (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect);
 152:	85 b1       	in	r24, 0x05	; 5
 154:	87 60       	ori	r24, 0x07	; 7
 156:	85 b9       	out	0x05, r24	; 5
 158:	08 95       	ret

0000015a <_Z11timer0_initv>:
	
}

void timer0_init(){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 15a:	84 b5       	in	r24, 0x24	; 36
 15c:	83 6a       	ori	r24, 0xA3	; 163
 15e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=  (1 << CS00);
 160:	85 b5       	in	r24, 0x25	; 37
 162:	81 60       	ori	r24, 0x01	; 1
 164:	85 bd       	out	0x25, r24	; 37

	OCR0A = 0;
 166:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 168:	18 bc       	out	0x28, r1	; 40
 16a:	08 95       	ret

0000016c <_Z11timer1_initv>:
}

void timer1_init(void) {
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 176:	af e6       	ldi	r26, 0x6F	; 111
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	8c 91       	ld	r24, X
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS10);//установим делитель.
 180:	80 81       	ld	r24, Z
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 83       	st	Z, r24
	sei();
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <_Z11timer2_initv>:
}

void timer2_init(void) {
	TCCR2A |= (1 << COM2A1)  | (1 << WGM21) | (1 << WGM20);
 18a:	e0 eb       	ldi	r30, 0xB0	; 176
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	83 68       	ori	r24, 0x83	; 131
 192:	80 83       	st	Z, r24
	TCCR2B |=  (1 << CS20);
 194:	e1 eb       	ldi	r30, 0xB1	; 177
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
	TCNT2 = 0x00;
 19e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 0;
 1a2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1a6:	08 95       	ret

000001a8 <_Z3tikv>:
}



void tik(){
	phasa_a++;
 1a8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <phasa_a>
 1ac:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <phasa_a+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <phasa_a+0x1>
 1b6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <phasa_a>
	phasa_b++;
 1ba:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <phasa_b>
 1be:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <phasa_b+0x1>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <phasa_b+0x1>
 1c8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <phasa_b>
	phasa_c++;
 1cc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <phasa_c>
 1d0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <phasa_c+0x1>
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <phasa_c+0x1>
 1da:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <phasa_c>
	
	if (phasa_a>29){phasa_a=0;}
 1de:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <phasa_a>
 1e2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <phasa_a+0x1>
 1e6:	4e 97       	sbiw	r24, 0x1e	; 30
 1e8:	24 f0       	brlt	.+8      	; 0x1f2 <_Z3tikv+0x4a>
 1ea:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <phasa_a+0x1>
 1ee:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <phasa_a>
	if (phasa_b>29){phasa_b=0;}
 1f2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <phasa_b>
 1f6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <phasa_b+0x1>
 1fa:	4e 97       	sbiw	r24, 0x1e	; 30
 1fc:	24 f0       	brlt	.+8      	; 0x206 <_Z3tikv+0x5e>
 1fe:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <phasa_b+0x1>
 202:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <phasa_b>
	if (phasa_c>29){phasa_c=0;}
 206:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <phasa_c>
 20a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <phasa_c+0x1>
 20e:	4e 97       	sbiw	r24, 0x1e	; 30
 210:	24 f0       	brlt	.+8      	; 0x21a <_Z3tikv+0x72>
 212:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <phasa_c+0x1>
 216:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <phasa_c>
	
	A_volume = SinTable[phasa_a];
 21a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <phasa_a>
 21e:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <phasa_a+0x1>
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e0 50       	subi	r30, 0x00	; 0
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 81       	ld	r24, Z
 22c:	91 81       	ldd	r25, Z+1	; 0x01
 22e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <A_volume+0x1>
 232:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <A_volume>
	B_volume = SinTable[phasa_b];
 236:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <phasa_b>
 23a:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <phasa_b+0x1>
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <B_volume+0x1>
 24e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <B_volume>
	C_volume = SinTable[phasa_c];
 252:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <phasa_c>
 256:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <phasa_c+0x1>
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e0 50       	subi	r30, 0x00	; 0
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 26a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	
	set_A_PWM();
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9set_A_PWMv>
	set_B_PWM();
 272:	0e 94 6d 00 	call	0xda	; 0xda <_Z9set_B_PWMv>
	set_C_PWM();
 276:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9set_C_PWMv>
	
	if (phasa_a==0){PORTD |= (1<<0);}
 27a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <phasa_a>
 27e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <phasa_a+0x1>
 282:	89 2b       	or	r24, r25
 284:	09 f4       	brne	.+2      	; 0x288 <_Z3tikv+0xe0>
 286:	58 9a       	sbi	0x0b, 0	; 11
	if (phasa_a==15){PORTD  &= ~(1<<0);}
 288:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <phasa_a>
 28c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <phasa_a+0x1>
 290:	0f 97       	sbiw	r24, 0x0f	; 15
 292:	09 f4       	brne	.+2      	; 0x296 <_Z3tikv+0xee>
 294:	58 98       	cbi	0x0b, 0	; 11
 296:	08 95       	ret

00000298 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	tik();
 2ba:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z3tikv>
	OCR1A = 33333/10;
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	9d e0       	ldi	r25, 0x0D	; 13
 2c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <main>:

int main(void)
{
    pin_init();
 2ec:	0e 94 a3 00 	call	0x146	; 0x146 <_Z8pin_initv>
	timer0_init();
 2f0:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z11timer0_initv>
	timer1_init();
 2f4:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z11timer1_initv>
	timer2_init();
 2f8:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z11timer2_initv>
	
	tik();
 2fc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z3tikv>
 300:	ff cf       	rjmp	.-2      	; 0x300 <main+0x14>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>

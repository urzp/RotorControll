
atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080017c  0080017c  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082b  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066a  00000000  00000000  00000cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031b  00000000  00000000  0000131d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 37       	cpi	r26, 0x7C	; 124
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e7       	ldi	r26, 0x7C	; 124
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 38       	cpi	r26, 0x84	; 132
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9set_A_PWMv>:

volatile int A_volume, B_volume, C_volume;


void set_A_PWM(){
	if (A_volume >= 0){
  a6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <A_volume>
  aa:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <A_volume+0x1>
  ae:	99 23       	and	r25, r25
  b0:	4c f0       	brlt	.+18     	; 0xc4 <_Z9set_A_PWMv+0x1e>
		PORTB |= (1<<A_Derect);
  b2:	28 9a       	sbi	0x05, 0	; 5
		A_PWM = A_volume;
  b4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <A_volume>
  b8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <A_volume+0x1>
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
	if (A_volume<0){
  c4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <A_volume>
  c8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <A_volume+0x1>
  cc:	99 23       	and	r25, r25
  ce:	5c f4       	brge	.+22     	; 0xe6 <_Z9set_A_PWMv+0x40>
		PORTB &= ~(1<<A_Derect);
  d0:	28 98       	cbi	0x05, 0	; 5
		A_PWM = 255 + A_volume;
  d2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <A_volume>
  d6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <A_volume+0x1>
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	9f 4f       	sbci	r25, 0xFF	; 255
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e6:	08 95       	ret

000000e8 <_Z9set_B_PWMv>:
	}
}

void set_B_PWM(){
	if (B_volume >= 0){
  e8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <B_volume>
  ec:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <B_volume+0x1>
  f0:	99 23       	and	r25, r25
  f2:	4c f0       	brlt	.+18     	; 0x106 <_Z9set_B_PWMv+0x1e>
		PORTB |= (1<<B_Derect);
  f4:	2c 9a       	sbi	0x05, 4	; 5
		B_PWM = B_volume;
  f6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <B_volume>
  fa:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <B_volume+0x1>
  fe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 102:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
	if (B_volume<0){
 106:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <B_volume>
 10a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <B_volume+0x1>
 10e:	99 23       	and	r25, r25
 110:	5c f4       	brge	.+22     	; 0x128 <_Z9set_B_PWMv+0x40>
		PORTB &= ~(1<<B_Derect);
 112:	2c 98       	cbi	0x05, 4	; 5
		B_PWM = 255 + B_volume;
 114:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <B_volume>
 118:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <B_volume+0x1>
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 124:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 128:	08 95       	ret

0000012a <_Z9set_C_PWMv>:
	}
}

void set_C_PWM(){
	if (C_volume >= 0){
 12a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 12e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 132:	99 23       	and	r25, r25
 134:	3c f0       	brlt	.+14     	; 0x144 <_Z9set_C_PWMv+0x1a>
		PORTB |= (1<<C_Derect);
 136:	2d 9a       	sbi	0x05, 5	; 5
		C_PWM = C_volume;
 138:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 13c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 140:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (C_volume<0){
 144:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 148:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 14c:	99 23       	and	r25, r25
 14e:	44 f4       	brge	.+16     	; 0x160 <_Z9set_C_PWMv+0x36>
		PORTB &= ~(1<<C_Derect);
 150:	2d 98       	cbi	0x05, 5	; 5
		C_PWM = 255 + C_volume;
 152:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 156:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 160:	08 95       	ret

00000162 <_Z8pin_initv>:
	}
}

void pin_init(void) {
	DDRB |= (1<<A_PD) | (1<<B_PD) | (1<<C_PD) | (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect);
 162:	84 b1       	in	r24, 0x04	; 4
 164:	81 63       	ori	r24, 0x31	; 49
 166:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<A_PD) | (1<<B_PD) | (1<<C_PD));
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8e 7c       	andi	r24, 0xCE	; 206
 16c:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect);
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	81 63       	ori	r24, 0x31	; 49
 172:	85 b9       	out	0x05, r24	; 5
 174:	08 95       	ret

00000176 <_Z11timer1_initv>:
}

void timer1_init(void) {
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 176:	e0 e8       	ldi	r30, 0x80	; 128
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 6a       	ori	r24, 0xA2	; 162
 17e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 180:	e1 e8       	ldi	r30, 0x81	; 129
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8a 61       	ori	r24, 0x1A	; 26
 188:	80 83       	st	Z, r24
	TCNT1 = 0x00;
 18a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 18e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	ICR1 = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 19a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0x00;
 19e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0x00;
 1a6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1aa:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1ae:	08 95       	ret

000001b0 <_Z11timer2_initv>:
}

void timer2_init(void) {
	TCCR2A |= (1 << COM2A1) | (1 << WGM21) | (1 << WGM20) | (1 << CS21);
 1b0:	e0 eb       	ldi	r30, 0xB0	; 176
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	83 68       	ori	r24, 0x83	; 131
 1b8:	80 83       	st	Z, r24
	TCNT2 = 0x00;
 1ba:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 0x00;
 1be:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1c2:	08 95       	ret

000001c4 <_Z3tikv>:
}

void tik(){
	phasa_a++;
 1c4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <phasa_a>
 1c8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <phasa_a+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <phasa_a+0x1>
 1d2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <phasa_a>
	phasa_b++;
 1d6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <phasa_b>
 1da:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <phasa_b+0x1>
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <phasa_b+0x1>
 1e4:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <phasa_b>
	phasa_c++;
 1e8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <phasa_c>
 1ec:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <phasa_c+0x1>
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <phasa_c+0x1>
 1f6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <phasa_c>
	
	if (phasa_a>59){phasa_a=0;}
 1fa:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <phasa_a>
 1fe:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <phasa_a+0x1>
 202:	cc 97       	sbiw	r24, 0x3c	; 60
 204:	24 f0       	brlt	.+8      	; 0x20e <_Z3tikv+0x4a>
 206:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <phasa_a+0x1>
 20a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <phasa_a>
	if (phasa_b>59){phasa_b=0;}
 20e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <phasa_b>
 212:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <phasa_b+0x1>
 216:	cc 97       	sbiw	r24, 0x3c	; 60
 218:	24 f0       	brlt	.+8      	; 0x222 <_Z3tikv+0x5e>
 21a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <phasa_b+0x1>
 21e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <phasa_b>
	if (phasa_c>59){phasa_c=0;}
 222:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <phasa_c>
 226:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <phasa_c+0x1>
 22a:	cc 97       	sbiw	r24, 0x3c	; 60
 22c:	24 f0       	brlt	.+8      	; 0x236 <_Z3tikv+0x72>
 22e:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <phasa_c+0x1>
 232:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <phasa_c>
	
	A_volume = SinTable[phasa_a];
 236:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <phasa_a>
 23a:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <phasa_a+0x1>
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <A_volume+0x1>
 24e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <A_volume>
	B_volume = SinTable[phasa_b];
 252:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <phasa_b>
 256:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <phasa_b+0x1>
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	e0 50       	subi	r30, 0x00	; 0
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	80 81       	ld	r24, Z
 264:	91 81       	ldd	r25, Z+1	; 0x01
 266:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <B_volume+0x1>
 26a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <B_volume>
	C_volume = SinTable[phasa_c];
 26e:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <phasa_c>
 272:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <phasa_c+0x1>
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e0 50       	subi	r30, 0x00	; 0
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 286:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
	
	set_A_PWM();
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9set_A_PWMv>
	set_B_PWM();
 28e:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z9set_B_PWMv>
	set_C_PWM();
 292:	0e 94 95 00 	call	0x12a	; 0x12a <_Z9set_C_PWMv>
 296:	08 95       	ret

00000298 <main>:
	//if (phasa_a==29){PORTD  &= ~(1<<PD1);}
}

int main(void)
{
    pin_init();
 298:	0e 94 b1 00 	call	0x162	; 0x162 <_Z8pin_initv>
	timer1_init();
 29c:	0e 94 bb 00 	call	0x176	; 0x176 <_Z11timer1_initv>
	timer2_init();
 2a0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z11timer2_initv>
	
	tik();
 2a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z3tikv>
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <main+0x10>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>


atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800140  00800140  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000883  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000696  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024e  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013a  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 39 01 	call	0x272	; 0x272 <main>
  9e:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9set_A_PWMi>:
volatile int A_volume, B_volume, C_volume;


void set_A_PWM(int phasa){
	
	A_PWM = SinTable[phasa];
  a6:	fc 01       	movw	r30, r24
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	e0 50       	subi	r30, 0x00	; 0
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	20 81       	ld	r18, Z
  b2:	27 bd       	out	0x27, r18	; 39
	
	if (phasa >= 0 && phasa < 14){
  b4:	8e 30       	cpi	r24, 0x0E	; 14
  b6:	91 05       	cpc	r25, r1
  b8:	08 f4       	brcc	.+2      	; 0xbc <_Z9set_A_PWMi+0x16>
		A_DerectPort |= (1<<A_Derect);		
  ba:	28 9a       	sbi	0x05, 0	; 5
	}
	if (phasa >= 14 && phasa < 30){
  bc:	0e 97       	sbiw	r24, 0x0e	; 14
  be:	40 97       	sbiw	r24, 0x10	; 16
  c0:	08 f4       	brcc	.+2      	; 0xc4 <_Z9set_A_PWMi+0x1e>
		A_DerectPort &= ~(1<<A_Derect);
  c2:	28 98       	cbi	0x05, 0	; 5
  c4:	08 95       	ret

000000c6 <_Z9set_B_PWMi>:
	}
}

void set_B_PWM(int phasa){
	
	B_PWM = SinTable[phasa];
  c6:	fc 01       	movw	r30, r24
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	20 81       	ld	r18, Z
  d2:	28 bd       	out	0x28, r18	; 40
	
	if (phasa >= 0 && phasa < 14){
  d4:	8e 30       	cpi	r24, 0x0E	; 14
  d6:	91 05       	cpc	r25, r1
  d8:	08 f4       	brcc	.+2      	; 0xdc <_Z9set_B_PWMi+0x16>
		B_DerectPort |= (1<<B_Derect);
  da:	29 9a       	sbi	0x05, 1	; 5
	}
	if (phasa >= 14 && phasa < 30){
  dc:	0e 97       	sbiw	r24, 0x0e	; 14
  de:	40 97       	sbiw	r24, 0x10	; 16
  e0:	08 f4       	brcc	.+2      	; 0xe4 <_Z9set_B_PWMi+0x1e>
		B_DerectPort &= ~(1<<B_Derect);
  e2:	29 98       	cbi	0x05, 1	; 5
  e4:	08 95       	ret

000000e6 <_Z9set_C_PWMi>:
	}
}

void set_C_PWM(int phasa){

	C_PWM = SinTable[phasa];
  e6:	fc 01       	movw	r30, r24
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	20 81       	ld	r18, Z
  f2:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	if (phasa >= 0 && phasa < 14){
  f6:	8e 30       	cpi	r24, 0x0E	; 14
  f8:	91 05       	cpc	r25, r1
  fa:	08 f4       	brcc	.+2      	; 0xfe <_Z9set_C_PWMi+0x18>
		C_DerectPort |= (1<<C_Derect);
  fc:	2a 9a       	sbi	0x05, 2	; 5
	}
	if (phasa >= 14 && phasa < 30){
  fe:	0e 97       	sbiw	r24, 0x0e	; 14
 100:	40 97       	sbiw	r24, 0x10	; 16
 102:	08 f4       	brcc	.+2      	; 0x106 <_Z9set_C_PWMi+0x20>
		C_DerectPort &= ~(1<<C_Derect);
 104:	2a 98       	cbi	0x05, 2	; 5
 106:	08 95       	ret

00000108 <_Z8pin_initv>:



void pin_init(void) {

	DDRB |= (1<<A_PD) | (1<<B_PD) | (1<<C_PD) | (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect);
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	8f 66       	ori	r24, 0x6F	; 111
 10c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<A_PD) | (1<<B_PD) | (1<<0);
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	81 66       	ori	r24, 0x61	; 97
 112:	8a b9       	out	0x0a, r24	; 10

	PORTB |= (1<<A_Derect) | (1<<B_Derect) | (1<<C_Derect);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	87 60       	ori	r24, 0x07	; 7
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret

0000011c <_Z11timer0_initv>:
	
}

void timer0_init(){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	83 6a       	ori	r24, 0xA3	; 163
 120:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=  (1 << CS00);
 122:	85 b5       	in	r24, 0x25	; 37
 124:	81 60       	ori	r24, 0x01	; 1
 126:	85 bd       	out	0x25, r24	; 37

	OCR0A = 0;
 128:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 12a:	18 bc       	out	0x28, r1	; 40
 12c:	08 95       	ret

0000012e <_Z11timer1_initv>:
}

void timer1_init(void) {
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 60       	ori	r24, 0x08	; 8
 136:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 138:	af e6       	ldi	r26, 0x6F	; 111
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	8c 91       	ld	r24, X
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS10);//установим делитель.
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24
	sei();
 148:	78 94       	sei
 14a:	08 95       	ret

0000014c <_Z11timer2_initv>:
}

void timer2_init(void) {
	TCCR2A |= (1 << COM2A1)  | (1 << WGM21) | (1 << WGM20);
 14c:	e0 eb       	ldi	r30, 0xB0	; 176
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	83 68       	ori	r24, 0x83	; 131
 154:	80 83       	st	Z, r24
	TCCR2B |=  (1 << CS20);
 156:	e1 eb       	ldi	r30, 0xB1	; 177
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
	TCNT2 = 0x00;
 160:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A = 0;
 164:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 168:	08 95       	ret

0000016a <_Z3tikv>:
}



void tik(){
	phasa_a++;
 16a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 16e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 178:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	phasa_b++;
 17c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <phasa_b>
 180:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <phasa_b+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <phasa_b+0x1>
 18a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <phasa_b>
	phasa_c++;
 18e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <phasa_c>
 192:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <phasa_c+0x1>
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <phasa_c+0x1>
 19c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <phasa_c>
	
	if (phasa_a>29){phasa_a=0;}
 1a0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 1a4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 1a8:	4e 97       	sbiw	r24, 0x1e	; 30
 1aa:	24 f0       	brlt	.+8      	; 0x1b4 <_Z3tikv+0x4a>
 1ac:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
 1b0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
	if (phasa_b>29){phasa_b=0;}
 1b4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <phasa_b>
 1b8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <phasa_b+0x1>
 1bc:	4e 97       	sbiw	r24, 0x1e	; 30
 1be:	24 f0       	brlt	.+8      	; 0x1c8 <_Z3tikv+0x5e>
 1c0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <phasa_b+0x1>
 1c4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <phasa_b>
	if (phasa_c>29){phasa_c=0;}
 1c8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <phasa_c>
 1cc:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <phasa_c+0x1>
 1d0:	4e 97       	sbiw	r24, 0x1e	; 30
 1d2:	24 f0       	brlt	.+8      	; 0x1dc <_Z3tikv+0x72>
 1d4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <phasa_c+0x1>
 1d8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <phasa_c>
	
	set_A_PWM(phasa_a);
 1dc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 1e0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9set_A_PWMi>
	set_B_PWM(phasa_b);
 1e8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <phasa_b>
 1ec:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <phasa_b+0x1>
 1f0:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z9set_B_PWMi>
	set_C_PWM(phasa_c);
 1f4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <phasa_c>
 1f8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <phasa_c+0x1>
 1fc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9set_C_PWMi>
	
	if (phasa_a==0){PORTD |= (1<<0);}
 200:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 204:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 208:	89 2b       	or	r24, r25
 20a:	09 f4       	brne	.+2      	; 0x20e <_Z3tikv+0xa4>
 20c:	58 9a       	sbi	0x0b, 0	; 11
	if (phasa_a==15){PORTD  &= ~(1<<0);}
 20e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 212:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 216:	0f 97       	sbiw	r24, 0x0f	; 15
 218:	09 f4       	brne	.+2      	; 0x21c <_Z3tikv+0xb2>
 21a:	58 98       	cbi	0x0b, 0	; 11
 21c:	08 95       	ret

0000021e <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	tik();
 240:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z3tikv>
	OCR1A = 33333/10;
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	9d e0       	ldi	r25, 0x0D	; 13
 248:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 24c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <main>:

int main(void)
{
    pin_init();
 272:	0e 94 84 00 	call	0x108	; 0x108 <_Z8pin_initv>
	timer0_init();
 276:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11timer0_initv>
	timer1_init();
 27a:	0e 94 97 00 	call	0x12e	; 0x12e <_Z11timer1_initv>
	timer2_init();
 27e:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z11timer2_initv>
	
	tik();
 282:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z3tikv>
 286:	ff cf       	rjmp	.-2      	; 0x286 <main+0x14>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
